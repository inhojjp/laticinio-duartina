import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { useCreateMilkDelivery } from "@/hooks/use-suppliers";
import { insertMilkDeliverySchema } from "@shared/schema";
import { formatCurrency } from "@/lib/utils";
import type { Supplier } from "@shared/schema";

interface MilkDeliveryModalProps {
  open: boolean;
  onClose: () => void;
  suppliers: Supplier[];
}

const milkDeliveryFormSchema = insertMilkDeliverySchema.extend({
  quantity: z.string().min(1, "Quantidade é obrigatória"),
  pricePerLiter: z.string().min(1, "Preço é obrigatório"),
  deliveryDate: z.string().min(1, "Data é obrigatória"),
});

type MilkDeliveryFormData = z.infer<typeof milkDeliveryFormSchema>;

export function MilkDeliveryModal({ open, onClose, suppliers }: MilkDeliveryModalProps) {
  const { toast } = useToast();
  const createMilkDeliveryMutation = useCreateMilkDelivery();
  const [selectedSupplier, setSelectedSupplier] = useState<Supplier | null>(null);
  const [calculatedTotal, setCalculatedTotal] = useState<number>(0);

  const form = useForm<MilkDeliveryFormData>({
    resolver: zodResolver(milkDeliveryFormSchema),
    defaultValues: {
      supplierId: undefined,
      supplierName: "",
      quantity: "",
      pricePerLiter: "",
      totalValue: "",
      deliveryDate: new Date().toISOString().slice(0, 16),
      isPaid: false,
      notes: "",
    },
  });

  const calculateTotal = (quantity: string, price: string) => {
    const qty = parseFloat(quantity) || 0;
    const prc = parseFloat(price) || 0;
    const total = qty * prc;
    setCalculatedTotal(total);
    form.setValue('totalValue', total.toFixed(2));
    return total;
  };

  const handleSupplierChange = (supplierId: string) => {
    const supplier = suppliers.find(s => s.id === parseInt(supplierId));
    if (supplier) {
      setSelectedSupplier(supplier);
      form.setValue('supplierId', supplier.id);
      form.setValue('supplierName', supplier.name);
      form.setValue('pricePerLiter', supplier.pricePerLiter);
      
      // Recalculate total with new price
      const quantity = form.getValues('quantity');
      if (quantity) {
        calculateTotal(quantity, supplier.pricePerLiter);
      }
    }
  };

  const handleQuantityChange = (value: string) => {
    const numericValue = value.replace(/[^\d.,]/g, '').replace(',', '.');
    form.setValue('quantity', numericValue);
    
    const price = form.getValues('pricePerLiter');
    if (price) {
      calculateTotal(numericValue, price);
    }
  };

  const handlePriceChange = (value: string) => {
    const numericValue = value.replace(/[^\d.,]/g, '').replace(',', '.');
    form.setValue('pricePerLiter', numericValue);
    
    const quantity = form.getValues('quantity');
    if (quantity) {
      calculateTotal(quantity, numericValue);
    }
  };

  const onSubmit = async (data: MilkDeliveryFormData) => {
    try {
      await createMilkDeliveryMutation.mutateAsync({
        supplierId: data.supplierId!,
        supplierName: data.supplierName,
        quantity: data.quantity,
        pricePerLiter: data.pricePerLiter,
        totalValue: data.totalValue,
        deliveryDate: new Date(data.deliveryDate),
        isPaid: data.isPaid || false,
        notes: data.notes || null,
      });

      toast({
        title: "Entrega registrada!",
        description: `${data.quantity}L de ${data.supplierName} - ${formatCurrency(data.totalValue)}`,
      });

      form.reset();
      setSelectedSupplier(null);
      setCalculatedTotal(0);
      onClose();
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Erro ao registrar entrega",
        description: "Tente novamente em alguns instantes.",
      });
    }
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Nova Entrega de Leite</DialogTitle>
          <DialogDescription>
            Registre uma nova entrega de leite de fornecedor
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="supplierId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Fornecedor</FormLabel>
                  <Select onValueChange={handleSupplierChange}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Selecione o fornecedor" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {suppliers.map((supplier) => (
                        <SelectItem key={supplier.id} value={supplier.id.toString()}>
                          {supplier.name} - {formatCurrency(supplier.pricePerLiter)}/L
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="quantity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Quantidade (Litros)</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="100" 
                      {...field}
                      onChange={(e) => handleQuantityChange(e.target.value)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="pricePerLiter"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Preço por Litro (R$)</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="2.50" 
                      {...field}
                      onChange={(e) => handlePriceChange(e.target.value)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="deliveryDate"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Data e Hora da Entrega</FormLabel>
                  <FormControl>
                    <Input 
                      type="datetime-local" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Observações (Opcional)</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="Observações sobre a entrega..."
                      className="min-h-[80px]"
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {calculatedTotal > 0 && (
              <div className="bg-company-primary/10 p-4 rounded-lg">
                <div className="text-center">
                  <p className="text-sm text-gray-600">Total da Entrega</p>
                  <p className="text-2xl font-bold company-primary">
                    {formatCurrency(calculatedTotal.toFixed(2))}
                  </p>
                </div>
              </div>
            )}

            <div className="flex justify-end space-x-2 pt-4">
              <Button type="button" variant="outline" onClick={onClose}>
                Cancelar
              </Button>
              <Button 
                type="submit" 
                disabled={createMilkDeliveryMutation.isPending || !selectedSupplier}
                className="bg-green-600 hover:bg-green-700"
              >
                {createMilkDeliveryMutation.isPending ? "Registrando..." : "Registrar Entrega"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}