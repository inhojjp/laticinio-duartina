import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Header } from "@/components/header";
import { BottomNav } from "@/components/bottom-nav";
import { SupplierModal } from "@/components/supplier-modal";
import { MilkDeliveryModal } from "@/components/milk-delivery-modal";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { formatCurrency, formatDate, formatTime, formatPhone } from "@/lib/utils";
import { useSuppliers, useMilkDeliveries, useSupplierBalances, useTotalOwedToSuppliers, useMarkMilkDeliveryAsPaid } from "@/hooks/use-suppliers";
import { Plus, Truck, Phone, Calendar, DollarSign, Check } from "lucide-react";
import type { Supplier, MilkDelivery } from "@shared/schema";

interface ConnectedUser {
  id: string;
  username: string;
  connectedAt: string;
  lastActivity: string;
}

interface SuppliersProps {
  onLogout: () => void;
  isOnline?: boolean;
  connectedUsers?: ConnectedUser[];
}

export default function Suppliers({ onLogout, isOnline = true, connectedUsers = [] }: SuppliersProps) {
  const [showSupplierModal, setShowSupplierModal] = useState(false);
  const [showMilkDeliveryModal, setShowMilkDeliveryModal] = useState(false);

  const { data: suppliers = [], isLoading: suppliersLoading } = useSuppliers();
  const { data: milkDeliveries = [], isLoading: deliveriesLoading } = useMilkDeliveries();
  const { data: supplierBalances = [] } = useSupplierBalances();
  const { data: totalOwed = { totalOwed: "0", suppliersCount: 0 } } = useTotalOwedToSuppliers();
  
  const markAsPaidMutation = useMarkMilkDeliveryAsPaid();

  const handleMarkAsPaid = (deliveryId: number) => {
    markAsPaidMutation.mutate(deliveryId);
  };

  const getStatusBadge = (isPaid: boolean) => {
    return isPaid ? (
      <Badge className="bg-green-500 text-white">Pago</Badge>
    ) : (
      <Badge variant="destructive">Pendente</Badge>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header onLogout={onLogout} isOnline={isOnline} connectedUsers={connectedUsers} />
      
      <main className="p-4 pb-20">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold company-primary">Fornecedores</h1>
          <div className="flex gap-2">
            <Button 
              onClick={() => setShowMilkDeliveryModal(true)}
              className="bg-green-600 hover:bg-green-700"
            >
              <Truck className="mr-2 h-4 w-4" />
              Nova Entrega
            </Button>
            <Button 
              onClick={() => setShowSupplierModal(true)}
              className="bg-company-primary hover:bg-blue-800"
            >
              <Plus className="mr-2 h-4 w-4" />
              Novo Fornecedor
            </Button>
          </div>
        </div>

        {/* Total Owed Summary */}
        <Card className="mb-6 bg-gradient-to-r from-red-500 to-red-600 text-white">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-bold mb-2">Total a Pagar</h2>
                <p className="text-red-100">Para {totalOwed.suppliersCount} fornecedores</p>
              </div>
              <div className="text-right">
                <p className="text-3xl font-bold">{formatCurrency(totalOwed.totalOwed)}</p>
                <p className="text-red-100 text-sm">Valor pendente</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Tabs defaultValue="deliveries" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="deliveries">Entregas de Leite</TabsTrigger>
            <TabsTrigger value="suppliers">Fornecedores</TabsTrigger>
            <TabsTrigger value="balances">Saldos</TabsTrigger>
          </TabsList>

          {/* Milk Deliveries Tab */}
          <TabsContent value="deliveries" className="space-y-4">
            {deliveriesLoading ? (
              <div className="space-y-4">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-32 bg-gray-200 rounded-md animate-pulse" />
                ))}
              </div>
            ) : milkDeliveries.length === 0 ? (
              <Card>
                <CardContent className="p-8 text-center">
                  <Truck className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                  <p className="text-gray-500">Nenhuma entrega de leite registrada</p>
                  <Button 
                    onClick={() => setShowMilkDeliveryModal(true)}
                    className="mt-4 bg-green-600 hover:bg-green-700"
                  >
                    Registrar Primeira Entrega
                  </Button>
                </CardContent>
              </Card>
            ) : (
              <div className="space-y-4">
                {milkDeliveries.map((delivery) => (
                  <Card key={delivery.id} className="hover:shadow-md transition-shadow">
                    <CardHeader>
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-lg">{delivery.supplierName}</CardTitle>
                          <CardDescription className="flex items-center mt-1">
                            <Calendar className="mr-1 h-3 w-3" />
                            {formatDate(new Date(delivery.deliveryDate))} às {formatTime(new Date(delivery.deliveryDate))}
                          </CardDescription>
                        </div>
                        {getStatusBadge(delivery.isPaid)}
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                        <div>
                          <p className="text-sm text-gray-600">Quantidade</p>
                          <p className="font-semibold">{delivery.quantity}L</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Preço/Litro</p>
                          <p className="font-semibold">{formatCurrency(delivery.pricePerLiter)}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Total</p>
                          <p className="font-bold company-primary text-lg">{formatCurrency(delivery.totalValue)}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Status</p>
                          <p className="font-semibold">{delivery.isPaid ? "Pago" : "Pendente"}</p>
                        </div>
                      </div>
                      
                      {delivery.notes && (
                        <p className="text-sm text-gray-700 bg-gray-50 p-2 rounded mb-3">
                          <strong>Observações:</strong> {delivery.notes}
                        </p>
                      )}
                      
                      {!delivery.isPaid && (
                        <Button
                          onClick={() => handleMarkAsPaid(delivery.id)}
                          disabled={markAsPaidMutation.isPending}
                          className="bg-green-600 hover:bg-green-700"
                          size="sm"
                        >
                          <Check className="mr-2 h-4 w-4" />
                          {markAsPaidMutation.isPending ? "Processando..." : "Marcar como Pago"}
                        </Button>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          {/* Suppliers Tab */}
          <TabsContent value="suppliers" className="space-y-4">
            {suppliersLoading ? (
              <div className="space-y-4">
                {[...Array(4)].map((_, i) => (
                  <div key={i} className="h-24 bg-gray-200 rounded-md animate-pulse" />
                ))}
              </div>
            ) : suppliers.length === 0 ? (
              <Card>
                <CardContent className="p-8 text-center">
                  <DollarSign className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                  <p className="text-gray-500">Nenhum fornecedor cadastrado</p>
                  <Button 
                    onClick={() => setShowSupplierModal(true)}
                    className="mt-4 bg-company-primary hover:bg-blue-800"
                  >
                    Cadastrar Primeiro Fornecedor
                  </Button>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {suppliers.map((supplier) => (
                  <Card key={supplier.id} className="hover:shadow-md transition-shadow">
                    <CardHeader>
                      <CardTitle className="text-lg">{supplier.name}</CardTitle>
                      <CardDescription className="flex items-center">
                        <Phone className="mr-1 h-3 w-3" />
                        {formatPhone(supplier.contact || "")}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-600">Preço por Litro:</span>
                          <span className="font-semibold">{formatCurrency(supplier.pricePerLiter)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-sm text-gray-600">Status:</span>
                          <Badge variant={supplier.active ? "default" : "secondary"}>
                            {supplier.active ? "Ativo" : "Inativo"}
                          </Badge>
                        </div>
                      </div>
                      <Button variant="outline" size="sm" className="w-full mt-4">
                        Editar Fornecedor
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          {/* Balances Tab */}
          <TabsContent value="balances" className="space-y-4">
            {supplierBalances.length === 0 ? (
              <Card>
                <CardContent className="p-8 text-center">
                  <DollarSign className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                  <p className="text-gray-500">Nenhum saldo pendente</p>
                </CardContent>
              </Card>
            ) : (
              <div className="space-y-4">
                {supplierBalances.map((balance: any) => (
                  <Card key={balance.supplierId} className="hover:shadow-md transition-shadow">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="font-semibold text-lg">{balance.supplierName}</h3>
                          <p className="text-sm text-gray-600">
                            {balance.unpaidDeliveries} entrega(s) pendente(s)
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="text-2xl font-bold company-secondary">
                            {formatCurrency(balance.totalOwed)}
                          </p>
                          <p className="text-sm text-gray-600">A pagar</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </main>

      <BottomNav activeTab="suppliers" onTabChange={() => {}} />
      
      <SupplierModal 
        open={showSupplierModal} 
        onClose={() => setShowSupplierModal(false)} 
      />
      
      <MilkDeliveryModal 
        open={showMilkDeliveryModal} 
        onClose={() => setShowMilkDeliveryModal(false)}
        suppliers={suppliers}
      />
    </div>
  );
}