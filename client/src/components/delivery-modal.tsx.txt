import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { formatPhone, parsePhone } from "@/lib/utils";
import { apiRequest } from "@/lib/queryClient";
import { Truck, MapPin } from "lucide-react";
import type { InsertDelivery } from "@shared/schema";

interface DeliveryModalProps {
  open: boolean;
  onClose: () => void;
}

export function DeliveryModal({ open, onClose }: DeliveryModalProps) {
  const [customerName, setCustomerName] = useState("");
  const [customerPhone, setCustomerPhone] = useState("");
  const [address, setAddress] = useState("");
  const [deliveryDate, setDeliveryDate] = useState("");
  const [deliveryTime, setDeliveryTime] = useState("");
  const [notes, setNotes] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const createDeliveryMutation = useMutation({
    mutationFn: async (delivery: InsertDelivery) => {
      const response = await apiRequest("/api/deliveries", {
        method: "POST",
        body: JSON.stringify(delivery),
      });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/deliveries"] });
      toast({
        title: "Entrega agendada com sucesso!",
        description: `Entrega para ${customerName} foi registrada.`,
      });
      handleClose();
    },
    onError: () => {
      toast({
        variant: "destructive",
        title: "Erro ao agendar entrega",
        description: "Verifique os dados e tente novamente.",
      });
    },
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!customerName || !customerPhone || !address || !deliveryDate || !deliveryTime) {
      toast({
        variant: "destructive",
        title: "Dados incompletos",
        description: "Preencha todos os campos obrigatórios.",
      });
      return;
    }

    setIsSubmitting(true);

    const deliveryDateTime = new Date(`${deliveryDate}T${deliveryTime}`);
    
    const delivery: InsertDelivery = {
      customerName,
      customerPhone: parsePhone(customerPhone),
      address,
      deliveryDate: deliveryDateTime,
      status: "pendente",
      notes: notes || null,
    };

    createDeliveryMutation.mutate(delivery);
    setIsSubmitting(false);
  };

  const handleClose = () => {
    setCustomerName("");
    setCustomerPhone("");
    setAddress("");
    setDeliveryDate("");
    setDeliveryTime("");
    setNotes("");
    onClose();
  };

  const handleAddressSearch = () => {
    if (address) {
      const encodedAddress = encodeURIComponent(address);
      window.open(`https://maps.google.com/maps?q=${encodedAddress}`, '_blank');
    }
  };

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <Truck className="mr-2 h-5 w-5" />
            Nova Entrega
          </DialogTitle>
          <DialogDescription>
            Agende uma nova entrega para um cliente
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-3">
            <div>
              <Label htmlFor="customer-name">Nome do Cliente *</Label>
              <Input
                id="customer-name"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                placeholder="Digite o nome do cliente"
                required
              />
            </div>

            <div>
              <Label htmlFor="customer-phone">Telefone *</Label>
              <Input
                id="customer-phone"
                value={customerPhone}
                onChange={(e) => setCustomerPhone(formatPhone(e.target.value))}
                placeholder="(00) 00000-0000"
                maxLength={15}
                required
              />
            </div>

            <div>
              <Label htmlFor="address">Endereço Completo *</Label>
              <div className="flex gap-2">
                <Input
                  id="address"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  placeholder="Rua, número, bairro, cidade"
                  required
                  className="flex-1"
                />
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={handleAddressSearch}
                  disabled={!address}
                >
                  <MapPin className="h-4 w-4" />
                </Button>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label htmlFor="delivery-date">Data da Entrega *</Label>
                <Input
                  id="delivery-date"
                  type="date"
                  value={deliveryDate}
                  onChange={(e) => setDeliveryDate(e.target.value)}
                  min={new Date().toISOString().split('T')[0]}
                  required
                />
              </div>

              <div>
                <Label htmlFor="delivery-time">Horário *</Label>
                <Input
                  id="delivery-time"
                  type="time"
                  value={deliveryTime}
                  onChange={(e) => setDeliveryTime(e.target.value)}
                  required
                />
              </div>
            </div>

            <div>
              <Label htmlFor="notes">Observações</Label>
              <Textarea
                id="notes"
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                placeholder="Informações adicionais sobre a entrega (opcional)"
                rows={3}
              />
            </div>
          </div>

          <div className="flex gap-3 pt-4">
            <Button type="button" variant="outline" onClick={handleClose} className="flex-1">
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="flex-1 bg-company-primary hover:bg-blue-800"
            >
              {isSubmitting ? "Agendando..." : "Agendar Entrega"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}