import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { useCreateSupplier } from "@/hooks/use-suppliers";
import { insertSupplierSchema } from "@shared/schema";
import { formatCurrency } from "@/lib/utils";

interface SupplierModalProps {
  open: boolean;
  onClose: () => void;
}

const supplierFormSchema = insertSupplierSchema.extend({
  pricePerLiter: z.string().min(1, "Preço é obrigatório"),
});

type SupplierFormData = z.infer<typeof supplierFormSchema>;

export function SupplierModal({ open, onClose }: SupplierModalProps) {
  const { toast } = useToast();
  const createSupplierMutation = useCreateSupplier();

  const form = useForm<SupplierFormData>({
    resolver: zodResolver(supplierFormSchema),
    defaultValues: {
      name: "",
      contact: "",
      pricePerLiter: "",
      active: true,
    },
  });

  const onSubmit = async (data: SupplierFormData) => {
    try {
      await createSupplierMutation.mutateAsync({
        ...data,
        pricePerLiter: data.pricePerLiter,
      });

      toast({
        title: "Fornecedor cadastrado!",
        description: `${data.name} foi adicionado com sucesso.`,
      });

      form.reset();
      onClose();
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Erro ao cadastrar fornecedor",
        description: "Tente novamente em alguns instantes.",
      });
    }
  };

  const handlePriceChange = (value: string) => {
    // Remove non-numeric characters except decimal point
    const numericValue = value.replace(/[^\d.,]/g, '').replace(',', '.');
    form.setValue('pricePerLiter', numericValue);
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Novo Fornecedor</DialogTitle>
          <DialogDescription>
            Cadastre um novo fornecedor de leite no sistema
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nome do Fornecedor</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="Ex: João Silva" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="contact"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Contato (Telefone)</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="(18) 99999-9999" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="pricePerLiter"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Preço por Litro (R$)</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="2.50" 
                      {...field}
                      onChange={(e) => handlePriceChange(e.target.value)}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex justify-end space-x-2 pt-4">
              <Button type="button" variant="outline" onClick={onClose}>
                Cancelar
              </Button>
              <Button 
                type="submit" 
                disabled={createSupplierMutation.isPending}
                className="bg-company-primary hover:bg-blue-800"
              >
                {createSupplierMutation.isPending ? "Cadastrando..." : "Cadastrar"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}