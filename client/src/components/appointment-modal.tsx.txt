import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { formatPhone, parsePhone } from "@/lib/utils";
import { apiRequest } from "@/lib/queryClient";
import { Calendar, Clock } from "lucide-react";
import type { InsertAppointment } from "@shared/schema";

interface AppointmentModalProps {
  open: boolean;
  onClose: () => void;
}

export function AppointmentModal({ open, onClose }: AppointmentModalProps) {
  const [customerName, setCustomerName] = useState("");
  const [customerPhone, setCustomerPhone] = useState("");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [date, setDate] = useState("");
  const [time, setTime] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const createAppointmentMutation = useMutation({
    mutationFn: async (appointment: InsertAppointment) => {
      const response = await apiRequest("/api/appointments", {
        method: "POST",
        body: JSON.stringify(appointment),
      });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/appointments"] });
      toast({
        title: "Agendamento criado com sucesso!",
        description: `Agendamento para ${customerName} foi registrado.`,
      });
      handleClose();
    },
    onError: () => {
      toast({
        variant: "destructive",
        title: "Erro ao criar agendamento",
        description: "Verifique os dados e tente novamente.",
      });
    },
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!customerName || !customerPhone || !title || !date || !time) {
      toast({
        variant: "destructive",
        title: "Dados incompletos",
        description: "Preencha todos os campos obrigatórios.",
      });
      return;
    }

    setIsSubmitting(true);

    const appointmentDate = new Date(`${date}T${time}`);
    
    const appointment: InsertAppointment = {
      customerName,
      customerPhone: parsePhone(customerPhone),
      title,
      description: description || null,
      date: appointmentDate,
      status: "agendado",
    };

    createAppointmentMutation.mutate(appointment);
    setIsSubmitting(false);
  };

  const handleClose = () => {
    setCustomerName("");
    setCustomerPhone("");
    setTitle("");
    setDescription("");
    setDate("");
    setTime("");
    onClose();
  };

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <Calendar className="mr-2 h-5 w-5" />
            Novo Agendamento
          </DialogTitle>
          <DialogDescription>
            Crie um novo agendamento para um cliente
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-3">
            <div>
              <Label htmlFor="customer-name">Nome do Cliente *</Label>
              <Input
                id="customer-name"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                placeholder="Digite o nome do cliente"
                required
              />
            </div>

            <div>
              <Label htmlFor="customer-phone">Telefone *</Label>
              <Input
                id="customer-phone"
                value={customerPhone}
                onChange={(e) => setCustomerPhone(formatPhone(e.target.value))}
                placeholder="(00) 00000-0000"
                maxLength={15}
                required
              />
            </div>

            <div>
              <Label htmlFor="title">Título do Agendamento *</Label>
              <Input
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Ex: Consulta, Entrega, Reunião"
                required
              />
            </div>

            <div>
              <Label htmlFor="description">Descrição</Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Detalhes adicionais do agendamento (opcional)"
                rows={3}
              />
            </div>

            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label htmlFor="date">Data *</Label>
                <Input
                  id="date"
                  type="date"
                  value={date}
                  onChange={(e) => setDate(e.target.value)}
                  min={new Date().toISOString().split('T')[0]}
                  required
                />
              </div>

              <div>
                <Label htmlFor="time">Horário *</Label>
                <Input
                  id="time"
                  type="time"
                  value={time}
                  onChange={(e) => setTime(e.target.value)}
                  required
                />
              </div>
            </div>
          </div>

          <div className="flex gap-3 pt-4">
            <Button type="button" variant="outline" onClick={handleClose} className="flex-1">
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="flex-1 bg-company-primary hover:bg-blue-800"
            >
              {isSubmitting ? "Criando..." : "Criar Agendamento"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}